import * as vscode from 'vscode';
import { SecurityIssue } from '../SecurityIssue';

export interface VulnerabilityClassification {
    id: string;
    name: string;
    description: string;
    category: 'injection' | 'authentication' | 'sensitive-data' | 'xml' | 'broken-access' | 'security-config' | 'xss' | 'insecure-deserialization' | 'vulnerable-components' | 'logging-monitoring';
    owaspTop10: string;
    cweMapping: string[];
    severity: 'critical' | 'high' | 'medium' | 'low';
    commonLanguages: string[];
    examples: string[];
    remediations: string[];
    detectionPatterns: RegExp[];
    businessImpact: string;
    technicalImpact: string;
    likelihood: 'high' | 'medium' | 'low';
}

export class VulnerabilityClassifier {
    private static classifications: Map<string, VulnerabilityClassification> = new Map();
    private static initialized = false;

    public static initialize(): void {
        if (this.initialized) return;

        this.loadClassifications();
        this.initialized = true;
    }

    public static classifyIssue(issue: SecurityIssue): VulnerabilityClassification | undefined {
        this.initialize();

        // Try to classify by CWE ID first
        if (issue.cweId) {
            for (const [id, classification] of this.classifications) {
                if (classification.cweMapping.includes(issue.cweId)) {
                    return classification;
                }
            }
        }

        // Try to classify by vulnerability type
        if (issue.vulnerabilityType) {
            const normalized = issue.vulnerabilityType.toLowerCase();
            for (const [id, classification] of this.classifications) {
                if (normalized.includes(classification.name.toLowerCase())) {
                    return classification;
                }
            }
        }

        // Try to classify by message content
        const messageContent = issue.message.toLowerCase();
        for (const [id, classification] of this.classifications) {
            if (messageContent.includes(classification.name.toLowerCase())) {
                return classification;
            }
        }

        return undefined;
    }

    public static getClassification(id: string): VulnerabilityClassification | undefined {
        this.initialize();
        return this.classifications.get(id);
    }

    public static getAllClassifications(): VulnerabilityClassification[] {
        this.initialize();
        return Array.from(this.classifications.values());
    }

    public static getClassificationsByCategory(category: string): VulnerabilityClassification[] {
        this.initialize();
        return Array.from(this.classifications.values())
            .filter(c => c.category === category);
    }

    public static getRiskScore(issue: SecurityIssue): number {
        const classification = this.classifyIssue(issue);
        if (!classification) return 50; // Default medium risk

        let score = 0;
        
        // Base severity score
        switch (classification.severity) {
            case 'critical': score += 40; break;
            case 'high': score += 30; break;
            case 'medium': score += 20; break;
            case 'low': score += 10; break;
        }

        // Likelihood modifier
        switch (classification.likelihood) {
            case 'high': score += 30; break;
            case 'medium': score += 20; break;
            case 'low': score += 10; break;
        }

        // Confidence modifier
        score += (issue.confidence / 100) * 30;

        return Math.min(100, Math.max(0, score));
    }

    private static loadClassifications(): void {
        const classifications: VulnerabilityClassification[] = [
            {
                id: 'sql-injection',
                name: 'SQL Injection',
                description: 'Injection of malicious SQL code through application inputs',
                category: 'injection',
                owaspTop10: 'A03:2021 - Injection',
                cweMapping: ['CWE-89', 'CWE-564', 'CWE-943'],
                severity: 'critical',
                commonLanguages: ['javascript', 'python', 'java', 'php', 'csharp', 'go'],
                examples: [
                    'SELECT * FROM users WHERE id = \' + userId',
                    'query = \"SELECT * FROM table WHERE name = \" + userInput',
                    'cursor.execute(\"SELECT * FROM users WHERE id = %s\" % user_id)'
                ],
                remediations: [
                    'Use parameterized queries or prepared statements',
                    'Implement input validation and sanitization',
                    'Use stored procedures with proper parameter handling',
                    'Apply principle of least privilege to database accounts',
                    'Use ORM frameworks with built-in protection'
                ],
                detectionPatterns: [
                    /(SELECT|INSERT|UPDATE|DELETE).*[\+\.].*[\+\.].*(WHERE|VALUES)/gi,
                    /execute\s*\(\s*[\'\"]\s*(SELECT|INSERT|UPDATE|DELETE).*[\+\%]/gi
                ],
                businessImpact: 'Data breach, unauthorized access to sensitive information, data manipulation',
                technicalImpact: 'Database compromise, data exfiltration, privilege escalation',
                likelihood: 'high'
            },
            {
                id: 'xss',
                name: 'Cross-Site Scripting (XSS)',
                description: 'Injection of malicious scripts into web pages viewed by other users',
                category: 'xss',
                owaspTop10: 'A03:2021 - Injection',
                cweMapping: ['CWE-79', 'CWE-80', 'CWE-83', 'CWE-87'],
                severity: 'high',
                commonLanguages: ['javascript', 'typescript', 'php', 'java', 'csharp'],
                examples: [
                    'document.innerHTML = userInput',
                    'element.innerHTML = \"<span>\" + data + \"</span>\"',
                    'echo $_GET[\"message\"]'
                ],
                remediations: [
                    'Use proper output encoding/escaping',
                    'Implement Content Security Policy (CSP)',
                    'Use textContent instead of innerHTML',
                    'Validate and sanitize all user inputs',
                    'Use templating engines with auto-escaping'
                ],
                detectionPatterns: [
                    /\.innerHTML\s*=\s*[^;]*[\+\$]/gi,
                    /document\.write\s*\(/gi,
                    /echo\s*\$_(GET|POST|REQUEST)/gi
                ],
                businessImpact: 'Session hijacking, credential theft, reputation damage',
                technicalImpact: 'Client-side code execution, data theft, account compromise',
                likelihood: 'high'
            },
            {
                id: 'command-injection',
                name: 'Command Injection',
                description: 'Execution of arbitrary commands on the host operating system',
                category: 'injection',
                owaspTop10: 'A03:2021 - Injection',
                cweMapping: ['CWE-78', 'CWE-77', 'CWE-88'],
                severity: 'critical',
                commonLanguages: ['python', 'php', 'javascript', 'java', 'go'],
                examples: [
                    'subprocess.call(cmd, shell=True)',
                    'exec(\"ls \" + userInput)',
                    'system($_GET[\"cmd\"])'
                ],
                remediations: [
                    'Use parameterized command execution',
                    'Avoid shell=True in subprocess calls',
                    'Implement strict input validation',
                    'Use allowlists for acceptable commands',
                    'Run with minimal privileges'
                ],
                detectionPatterns: [
                    /subprocess\.(call|run|Popen).*shell\s*=\s*True/gi,
                    /system\s*\(\s*\$/gi,
                    /exec\s*\(\s*[\'\"]/gi
                ],
                businessImpact: 'Complete system compromise, data breach, service disruption',
                technicalImpact: 'Remote code execution, privilege escalation, system takeover',
                likelihood: 'medium'
            },
            {
                id: 'path-traversal',
                name: 'Path Traversal',
                description: 'Access to files and directories outside the intended directory',
                category: 'broken-access',
                owaspTop10: 'A01:2021 - Broken Access Control',
                cweMapping: ['CWE-22', 'CWE-23', 'CWE-36', 'CWE-73'],
                severity: 'high',
                commonLanguages: ['javascript', 'python', 'java', 'php', 'go'],
                examples: [
                    'open(\"../../../etc/passwd\")',
                    'readFile(userInput + \".txt\")',
                    'include($_GET[\"page\"] . \".php\")'
                ],
                remediations: [
                    'Validate and sanitize file paths',
                    'Use allowlists for permitted files',
                    'Implement proper access controls',
                    'Use secure file APIs that prevent traversal',
                    'Run with restricted file system permissions'
                ],
                detectionPatterns: [
                    /\.\.\//gi,
                    /\.\.\\/gi,
                    /[\'\"]\s*\/[^\'\"]*\.\./gi
                ],
                businessImpact: 'Unauthorized file access, configuration exposure, sensitive data leak',
                technicalImpact: 'File system access, configuration disclosure, potential privilege escalation',
                likelihood: 'medium'
            },
            {
                id: 'insecure-deserialization',
                name: 'Insecure Deserialization',
                description: 'Untrusted data deserialization leading to remote code execution',
                category: 'insecure-deserialization',
                owaspTop10: 'A08:2021 - Software and Data Integrity Failures',
                cweMapping: ['CWE-502', 'CWE-915'],
                severity: 'critical',
                commonLanguages: ['java', 'python', 'php', 'csharp', 'javascript'],
                examples: [
                    'pickle.load(untrusted_data)',
                    'ObjectInputStream.readObject()',
                    'unserialize($_POST[\"data\"])'
                ],
                remediations: [
                    'Avoid deserializing untrusted data',
                    'Use safe data formats like JSON',
                    'Implement integrity checks',
                    'Use allowlists for deserializable classes',
                    'Run deserialization in restricted environments'
                ],
                detectionPatterns: [
                    /pickle\.loads?\s*\(/gi,
                    /ObjectInputStream.*readObject/gi,
                    /unserialize\s*\(/gi
                ],
                businessImpact: 'Remote code execution, complete system compromise, data breach',
                technicalImpact: 'Arbitrary code execution, privilege escalation, system compromise',
                likelihood: 'medium'
            },
            {
                id: 'weak-cryptography',
                name: 'Weak Cryptography',
                description: 'Use of weak or broken cryptographic algorithms',
                category: 'sensitive-data',
                owaspTop10: 'A02:2021 - Cryptographic Failures',
                cweMapping: ['CWE-327', 'CWE-328', 'CWE-338', 'CWE-326'],
                severity: 'high',
                commonLanguages: ['javascript', 'python', 'java', 'csharp', 'go'],
                examples: [
                    'hashlib.md5(password)',
                    'Math.random() for security tokens',
                    'DES encryption usage'
                ],
                remediations: [
                    'Use strong cryptographic algorithms (AES, SHA-256+)',
                    'Use cryptographically secure random generators',
                    'Implement proper key management',
                    'Use established cryptographic libraries',
                    'Regular security reviews of cryptographic usage'
                ],
                detectionPatterns: [
                    /hashlib\.(md5|sha1)\s*\(/gi,
                    /Math\.random\s*\(\)/gi,
                    /(DES|RC4|MD5|SHA1).*encrypt/gi
                ],
                businessImpact: 'Data compromise, credential theft, compliance violations',
                technicalImpact: 'Cryptographic bypass, data decryption, authentication bypass',
                likelihood: 'medium'
            },
            {
                id: 'hardcoded-secrets',
                name: 'Hardcoded Secrets',
                description: 'Sensitive credentials embedded directly in source code',
                category: 'authentication',
                owaspTop10: 'A07:2021 - Identification and Authentication Failures',
                cweMapping: ['CWE-798', 'CWE-259', 'CWE-321'],
                severity: 'critical',
                commonLanguages: ['javascript', 'python', 'java', 'php', 'csharp', 'go'],
                examples: [
                    'const apiKey = \"sk-1234567890abcdef\"',
                    'password = \"admin123\"',
                    'SECRET_KEY = \"my-secret-key\"'
                ],
                remediations: [
                    'Use environment variables for secrets',
                    'Implement secure configuration management',
                    'Use key management services',
                    'Encrypt sensitive configuration',
                    'Regular secret rotation'
                ],
                detectionPatterns: [
                    /(password|pwd|secret|token|key|api_key)\s*[:=]\s*[\'"][^\'"]{8,}[\'"]/gi,
                    /(sk-|pk-|sec-)[a-zA-Z0-9]{20,}/gi
                ],
                businessImpact: 'Unauthorized access, data breach, service compromise',
                technicalImpact: 'Credential exposure, authentication bypass, privilege escalation',
                likelihood: 'high'
            },
            {
                id: 'prototype-pollution',
                name: 'Prototype Pollution',
                description: 'Modification of object prototypes leading to security vulnerabilities',
                category: 'injection',
                owaspTop10: 'A03:2021 - Injection',
                cweMapping: ['CWE-1321', 'CWE-915'],
                severity: 'high',
                commonLanguages: ['javascript', 'typescript'],
                examples: [
                    'obj.__proto__.polluted = true',
                    'JSON.parse(\'{"__proto__": {"polluted": true}}\')',
                    'merge(target, source) without protection'
                ],
                remediations: [
                    'Use Map instead of objects for dynamic properties',
                    'Validate object keys before assignment',
                    'Use Object.freeze() on prototypes',
                    'Implement safe object merging functions',
                    'Use libraries with prototype pollution protection'
                ],
                detectionPatterns: [
                    /__proto__/gi,
                    /constructor\.prototype/gi,
                    /\[['"]__proto__['"]\]/gi
                ],
                businessImpact: 'Application logic bypass, denial of service, privilege escalation',
                technicalImpact: 'Runtime manipulation, application behavior modification',
                likelihood: 'medium'
            }
        ];

        classifications.forEach(classification => {
            this.classifications.set(classification.id, classification);
        });
    }

    public static generateSecurityReport(issues: SecurityIssue[]): {
        summary: any;
        classifications: any[];
        riskDistribution: any;
        remediationPriority: any[];
    } {
        this.initialize();

        const classified = issues.map(issue => ({
            issue,
            classification: this.classifyIssue(issue),
            riskScore: this.getRiskScore(issue)
        }));

        const summary = {
            totalIssues: issues.length,
            classifiedIssues: classified.filter(c => c.classification).length,
            averageRiskScore: classified.reduce((sum, c) => sum + c.riskScore, 0) / classified.length || 0,
            criticalCount: classified.filter(c => c.classification?.severity === 'critical').length,
            highCount: classified.filter(c => c.classification?.severity === 'high').length,
            mediumCount: classified.filter(c => c.classification?.severity === 'medium').length,
            lowCount: classified.filter(c => c.classification?.severity === 'low').length
        };

        const classificationGroups = new Map<string, any>();
        classified.forEach(({ issue, classification, riskScore }) => {
            if (!classification) return;
            
            if (!classificationGroups.has(classification.id)) {
                classificationGroups.set(classification.id, {
                    classification,
                    count: 0,
                    averageRiskScore: 0,
                    issues: []
                });
            }
            
            const group = classificationGroups.get(classification.id)!;
            group.count++;
            group.issues.push({ issue, riskScore });
            group.averageRiskScore = group.issues.reduce((sum: number, item: any) => sum + item.riskScore, 0) / group.count;
        });

        const classifications = Array.from(classificationGroups.values())
            .sort((a, b) => b.averageRiskScore - a.averageRiskScore);

        const riskDistribution = {
            critical: summary.criticalCount,
            high: summary.highCount,
            medium: summary.mediumCount,
            low: summary.lowCount
        };

        const remediationPriority = classifications
            .filter(c => c.count > 0)
            .map(c => ({
                classification: c.classification.name,
                priority: c.averageRiskScore,
                count: c.count,
                impact: c.classification.businessImpact,
                remediation: c.classification.remediations[0] // Primary remediation
            }))
            .sort((a, b) => b.priority - a.priority);

        return {
            summary,
            classifications,
            riskDistribution,
            remediationPriority
        };
    }
}