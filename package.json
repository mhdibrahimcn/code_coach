{
  "name": "code-security-analyzer",
  "displayName": "Code Security Analyzer",
  "description": "Analyzes code for vulnerabilities and errors with inline inspection lenses and hover information. For product key inquiries, contact: nfo.althafka@gmail.com | +91 7012296461",
  "version": "0.0.2",
  "publisher": "AlthafKA",
  "engines": {
    "vscode": "^1.101.0"
  },
  "categories": [
    "Programming Languages",
    "Linters",
    "Other"
  ],
  "activationEvents": [
    "onLanguage:javascript",
    "onLanguage:typescript",
    "onLanguage:python",
    "onLanguage:java",
    "onLanguage:csharp",
    "onLanguage:php",
    "onLanguage:go",
    "onLanguage:rust",
    "onLanguage:cpp",
    "onLanguage:c",
    "onLanguage:dart"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "codeSecurityAnalyzer.analyzeActiveFile",
        "title": "üîç Analyze Active File for Security Issues",
        "category": "Code Security Analyzer"
      },
      {
        "command": "codeSecurityAnalyzer.showComplexityReport",
        "title": "üìä Show Code Complexity Report",
        "category": "Code Security Analyzer"
      },
      {
        "command": "codeSecurityAnalyzer.openSettings",
        "title": "‚öôÔ∏è Open Settings Panel",
        "category": "Code Security Analyzer"
      },
      {
        "command": "codeSecurityAnalyzer.configureApiKey",
        "title": "üîë Configure AI Provider & API Key",
        "category": "Code Security Analyzer"
      },
      {
        "command": "codeSecurityAnalyzer.getAIFix",
        "title": "ü§ñ Get AI Fix Suggestion",
        "category": "Code Security Analyzer"
      },
      {
        "command": "codeSecurityAnalyzer.applyAIFix",
        "title": "üöÄ Apply AI Fix",
        "category": "Code Security Analyzer"
      },
      {
        "command": "codeSecurityAnalyzer.switchAiProvider",
        "title": "üîÑ Switch AI Provider",
        "category": "Code Security Analyzer"
      },
      {
        "command": "codeSecurityAnalyzer.toggleOfflineMode",
        "title": "üì° Toggle Offline/Online Mode",
        "category": "Code Security Analyzer"
      },
      {
        "command": "codeSecurityAnalyzer.deepSecurityAnalysis",
        "title": "üî¨ Deep Security Analysis",
        "category": "Code Security Analyzer"
      },
      {
        "command": "codeSecurityAnalyzer.toggleDeepMode",
        "title": "üîç Toggle Deep Analysis Mode",
        "category": "Code Security Analyzer"
      },
      {
        "command": "codeSecurityAnalyzer.showActivationStatus",
        "title": "üìä Show Activation Status",
        "category": "Code Security Analyzer"
      }
    ],
    "configuration": {
      "title": "Code Security Analyzer",
      "properties": {
        "codeSecurityAnalyzer.aiProvider": {
          "type": "string",
          "enum": ["openai", "anthropic", "openrouter", "ollama", "custom"],
          "default": "openrouter",
          "description": "AI provider for security analysis",
          "enumDescriptions": [
            "OpenAI GPT models (official API)",
            "Anthropic Claude models (official API)",
            "OpenRouter (multiple models via proxy)",
            "Ollama (local models)",
            "Custom OpenAI-compatible endpoint"
          ]
        },
        "codeSecurityAnalyzer.aiModel": {
          "type": "string",
          "default": "openai/gpt-4o-mini",
          "description": "AI model to use for analysis. Format depends on provider (e.g., 'gpt-4o-mini' for OpenAI, 'openai/gpt-4o-mini' for OpenRouter)"
        },
        "codeSecurityAnalyzer.apiKeys": {
          "type": "object",
          "default": {},
          "description": "Stored API keys for different providers",
          "scope": "application"
        },
        "codeSecurityAnalyzer.customEndpoint": {
          "type": "string",
          "default": "",
          "description": "Custom API endpoint URL (required for custom provider)",
          "format": "uri",
          "pattern": "^https?://.*"
        },
        "codeSecurityAnalyzer.customModel": {
          "type": "string",
          "default": "",
          "description": "Custom model name for custom endpoints (e.g., 'gpt-4', 'claude-3-sonnet')"
        },
        "codeSecurityAnalyzer.temperature": {
          "type": "number",
          "default": 0.1,
          "minimum": 0,
          "maximum": 2,
          "description": "AI model temperature (0 = deterministic, 2 = very creative)"
        },
        "codeSecurityAnalyzer.maxTokens": {
          "type": "number",
          "default": 1500,
          "minimum": 100,
          "maximum": 8000,
          "description": "Maximum tokens for AI responses"
        },
        "codeSecurityAnalyzer.requestTimeout": {
          "type": "number",
          "default": 30000,
          "minimum": 5000,
          "maximum": 120000,
          "description": "Request timeout in milliseconds"
        },
        "codeSecurityAnalyzer.enableAIAnalysis": {
          "type": "boolean",
          "default": true,
          "description": "Enable AI-powered security analysis (requires API key)"
        },
        "codeSecurityAnalyzer.enableOfflineAnalysis": {
          "type": "boolean",
          "default": true,
          "description": "Enable offline regex-based vulnerability detection"
        },
        "codeSecurityAnalyzer.hybridMode": {
          "type": "boolean",
          "default": true,
          "description": "Use hybrid offline+AI analysis for optimal accuracy and performance"
        },
        "codeSecurityAnalyzer.maxFileSize": {
          "type": "number",
          "default": 10000,
          "description": "Maximum file size (in characters) for AI analysis"
        },
        "codeSecurityAnalyzer.chunkSize": {
          "type": "number",
          "default": 3000,
          "description": "Chunk size for processing large files (in characters)"
        },
        "codeSecurityAnalyzer.analysisDelay": {
          "type": "number",
          "default": 2000,
          "description": "Delay (in milliseconds) before triggering analysis after text changes"
        },
        "codeSecurityAnalyzer.enableBestPractices": {
          "type": "boolean",
          "default": true,
          "description": "Enable best practice checks (console.log, empty catch, etc.)"
        },
        "codeSecurityAnalyzer.enableComplexityAnalysis": {
          "type": "boolean",
          "default": true,
          "description": "Enable code complexity analysis"
        },
        "codeSecurityAnalyzer.showProviderInSuggestions": {
          "type": "boolean",
          "default": true,
          "description": "Show AI provider and model name in suggestions"
        },
        "codeSecurityAnalyzer.debugMode": {
          "type": "boolean",
          "default": false,
          "description": "Enable debug logging for troubleshooting AI provider issues"
        },
        "codeSecurityAnalyzer.enableDeepSecurityAnalysis": {
          "type": "boolean",
          "default": false,
          "description": "Enable comprehensive function-level security analysis with AI (requires AI provider)"
        },
        "codeSecurityAnalyzer.deepAnalysisTimeout": {
          "type": "number",
          "default": 60000,
          "minimum": 30000,
          "maximum": 300000,
          "description": "Timeout for deep security analysis in milliseconds"
        },
        "codeSecurityAnalyzer.maxFunctionsToAnalyze": {
          "type": "number",
          "default": 20,
          "minimum": 5,
          "maximum": 100,
          "description": "Maximum number of functions to analyze in deep mode"
        },
        "codeSecurityAnalyzer.enableCWEMapping": {
          "type": "boolean",
          "default": true,
          "description": "Include CWE (Common Weakness Enumeration) references in vulnerability reports"
        },
        "codeSecurityAnalyzer.enableOWASPMapping": {
          "type": "boolean",
          "default": true,
          "description": "Include OWASP Top 10 mappings in security vulnerability reports"
        },
        "codeSecurityAnalyzer.showFunctionComplexityMetrics": {
          "type": "boolean",
          "default": true,
          "description": "Display function complexity metrics in analysis results"
        },
        "codeSecurityAnalyzer.riskLevelThreshold": {
          "type": "string",
          "enum": ["low", "medium", "high", "critical"],
          "default": "medium",
          "description": "Minimum risk level to display notifications for",
          "enumDescriptions": [
            "Show notifications for all security issues",
            "Show notifications for medium risk and above",
            "Show notifications for high risk and above", 
            "Show notifications only for critical security issues"
          ]
        }
      }
    },
    "menus": {
      "editor/context": [
        {
          "command": "codeSecurityAnalyzer.analyzeActiveFile",
          "group": "navigation",
          "when": "editorTextFocus"
        },
        {
          "command": "codeSecurityAnalyzer.deepSecurityAnalysis",
          "group": "navigation",
          "when": "editorTextFocus"
        }
      ],
      "commandPalette": [
        {
          "command": "codeSecurityAnalyzer.analyzeActiveFile"
        },
        {
          "command": "codeSecurityAnalyzer.showComplexityReport"
        },
        {
          "command": "codeSecurityAnalyzer.openSettings"
        },
        {
          "command": "codeSecurityAnalyzer.configureApiKey"
        },
        {
          "command": "codeSecurityAnalyzer.switchAiProvider"
        },
        {
          "command": "codeSecurityAnalyzer.toggleOfflineMode"
        },
        {
          "command": "codeSecurityAnalyzer.getAIFix"
        },
        {
          "command": "codeSecurityAnalyzer.applyAIFix"
        },
        {
          "command": "codeSecurityAnalyzer.deepSecurityAnalysis"
        },
        {
          "command": "codeSecurityAnalyzer.toggleDeepMode"
        },
        {
          "command": "codeSecurityAnalyzer.showActivationStatus"
        }
      ]
    },
    "views": {
      "codeSecurityAnalyzer": [
        {
          "type": "webview",
          "id": "codeSecurityAnalyzer.settingsView",
          "name": "Settings",
          "when": "true"
        }
      ]
    },
    "viewsContainers": {
      "activitybar": [
        {
          "id": "codeSecurityAnalyzer",
          "title": "Code Security Analyzer",
          "icon": "$(shield)"
        }
      ]
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "npm run check-types && npm run lint && node esbuild.js",
    "watch": "npm-run-all -p watch:*",
    "watch:esbuild": "node esbuild.js --watch",
    "watch:tsc": "tsc --noEmit --watch --project tsconfig.json",
    "package": "npm run check-types && npm run lint && node esbuild.js --production",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "check-types": "tsc --noEmit",
    "lint": "eslint src",
    "test": "vscode-test"
  },
  "devDependencies": {
    "@types/mocha": "^10.0.10",
    "@types/node": "20.x",
    "@types/vscode": "^1.101.0",
    "@typescript-eslint/eslint-plugin": "^8.31.1",
    "@typescript-eslint/parser": "^8.31.1",
    "@vscode/test-cli": "^0.0.11",
    "@vscode/test-electron": "^2.5.2",
    "@vscode/vsce": "^3.6.0",
    "esbuild": "^0.25.3",
    "eslint": "^9.25.1",
    "npm-run-all": "^4.1.5",
    "typescript": "^5.8.3"
  }
}
